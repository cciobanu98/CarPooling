// <auto-generated />
using System;
using CarPooling.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarPooling.Context.Migrations
{
    [DbContext(typeof(CarPoolingContext))]
    [Migration("20190327192949_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarPooling.Domain.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarNumbers")
                        .HasMaxLength(32);

                    b.Property<string>("Color")
                        .HasMaxLength(32);

                    b.Property<string>("Model")
                        .HasMaxLength(32);

                    b.Property<int?>("Seats");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarPooling.Domain.ChatPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("ChatPreferences");
                });

            modelBuilder.Entity("CarPooling.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<int?>("RideId");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CarPooling.Domain.MemberCar", b =>
                {
                    b.Property<int>("CarId");

                    b.Property<int>("UserId");

                    b.HasKey("CarId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MembersCars");
                });

            modelBuilder.Entity("CarPooling.Domain.MusicPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<int?>("Volume");

                    b.HasKey("Id");

                    b.ToTable("MusicPreferences");
                });

            modelBuilder.Entity("CarPooling.Domain.Preferences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Allow_pet");

                    b.Property<bool?>("Allow_smoke");

                    b.Property<int?>("ChatPreferenceId");

                    b.Property<int?>("MusicPreferenceId");

                    b.HasKey("Id");

                    b.HasIndex("ChatPreferenceId")
                        .IsUnique()
                        .HasFilter("[ChatPreferenceId] IS NOT NULL");

                    b.HasIndex("MusicPreferenceId")
                        .IsUnique()
                        .HasFilter("[MusicPreferenceId] IS NOT NULL");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("CarPooling.Domain.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<int>("EnrouteCityId");

                    b.Property<int?>("RequesterId");

                    b.Property<int?>("RideId");

                    b.Property<bool?>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EnrouteCityId");

                    b.HasIndex("RequesterId");

                    b.HasIndex("RideId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("CarPooling.Domain.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<int?>("DestinationCityId");

                    b.Property<int>("Price");

                    b.Property<int?>("SourceCityId");

                    b.Property<DateTime>("TravelStartDateTime");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("DestinationCityId");

                    b.HasIndex("SourceCityId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("CarPooling.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age");

                    b.Property<DateTime>("Date_created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Gender")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .HasMaxLength(32);

                    b.Property<int?>("PreferencesId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.HasIndex("PreferencesId")
                        .IsUnique()
                        .HasFilter("[PreferencesId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarPooling.Domain.City", b =>
                {
                    b.HasOne("CarPooling.Domain.Ride")
                        .WithMany("EnrouteCities")
                        .HasForeignKey("RideId");
                });

            modelBuilder.Entity("CarPooling.Domain.MemberCar", b =>
                {
                    b.HasOne("CarPooling.Domain.Car", "Car")
                        .WithMany("MemberCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarPooling.Domain.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CarPooling.Domain.Preferences", b =>
                {
                    b.HasOne("CarPooling.Domain.ChatPreference", "ChatPreference")
                        .WithOne("Preferences")
                        .HasForeignKey("CarPooling.Domain.Preferences", "ChatPreferenceId");

                    b.HasOne("CarPooling.Domain.MusicPreference", "MusicPreference")
                        .WithOne("Preferences")
                        .HasForeignKey("CarPooling.Domain.Preferences", "MusicPreferenceId");
                });

            modelBuilder.Entity("CarPooling.Domain.Request", b =>
                {
                    b.HasOne("CarPooling.Domain.City", "EnrouteCity")
                        .WithMany()
                        .HasForeignKey("EnrouteCityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CarPooling.Domain.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId");

                    b.HasOne("CarPooling.Domain.Ride", "Ride")
                        .WithMany("Requests")
                        .HasForeignKey("RideId");
                });

            modelBuilder.Entity("CarPooling.Domain.Ride", b =>
                {
                    b.HasOne("CarPooling.Domain.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("CarPooling.Domain.City", "DestinationCity")
                        .WithMany()
                        .HasForeignKey("DestinationCityId");

                    b.HasOne("CarPooling.Domain.City", "SourceCity")
                        .WithMany()
                        .HasForeignKey("SourceCityId");
                });

            modelBuilder.Entity("CarPooling.Domain.User", b =>
                {
                    b.HasOne("CarPooling.Domain.Preferences", "Preferences")
                        .WithOne("User")
                        .HasForeignKey("CarPooling.Domain.User", "PreferencesId");
                });
#pragma warning restore 612, 618
        }
    }
}
